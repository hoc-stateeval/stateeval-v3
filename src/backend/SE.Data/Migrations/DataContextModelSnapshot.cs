// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SE.Data;

#nullable disable

namespace SE.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SE.Domain.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSchool")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Building", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.DistrictConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("AllowCollectedEvidenceSelectionInFinalReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("AllowDownloadReportsSchoolAdmins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("AllowFocusedComponentScoring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("AllowPackagedEvidenceSelectionInFinalReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("AllowTeeYTDEvidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("AssignedCalibrationExerciseSharingType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<bool?>("CalibrationExercisesEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("CalibrationExercisesModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CriticalAttributesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CriticalAttributesReferenceOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("DistrictAssignsCalibrationExercises")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ExemplarVideosModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FinalReportCustomText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("FinalReportTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("eVAL Summative Report");

                    b.Property<long>("FrameworkContextId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsFinalReportConfigDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsMidYearReportConfigDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsObsReportConfigDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsSelfAssessReportConfigDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsStudentGrowthReportConfigDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MidYearReportCustomText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("MidYearReportTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("eVAL Mid Year Report");

                    b.Property<bool?>("NonSummativeScoringEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ObservationReportCustomText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ObservationReportTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("eVAL Observation Report");

                    b.Property<bool?>("ReportArchivesPurged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SelfAssessReportTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("eVAL Self Assessment Report");

                    b.Property<string>("SelfAssessmentReportCustomText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool?>("SelfAssessmentsModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ShowArchivedEvaluateeReports")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("StudentGrowthGoalSettingReportCustomText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("StudentGrowthGoalSettingReportTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("eVAL Student Growth Goal Setting Report");

                    b.Property<bool?>("SummativeCriteriaStmtOfPerfRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("SummativeEvaluationEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("SummativeNextYearEvalCycleIsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("SummativeTorFinalRecIsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("FrameworkContextId")
                        .IsUnique();

                    b.ToTable("DistrictConfiguration", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.Evaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("AutoSubmitAfterReceipt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ByPassReceipt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ByPassReceiptOverrideComment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValue("");

                    b.Property<bool?>("ByPassSGScores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ComprehensiveCarryForward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ComprehensiveCarryForwardPerformanceLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("ComprehensiveCarryForwardSchoolYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeactivateMessage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("DropToPaper")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DropToPaperOverrideComment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("EOYConfDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EvaluateeFinalReportViewDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EvaluateeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EvaluateePlanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("EvaluateeReflections")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool?>("EvaluateeReflectionsIsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("EvaluationType")
                        .HasColumnType("int");

                    b.Property<long?>("EvaluatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("EvaluatorRecommendations")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool?>("EvaluatorScoresShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FinalAcknowledgementSentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("FinalReportShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("FocusedFrameworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FocusedSGFrameworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastYearEvaluateePlanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("LastYearFocusedFrameworkNodeShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("LastYearFocusedSGframeworkNodeShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("LockDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MarkedFinalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("MidYearReportsShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ModifiedCompFocusedFrameworkNode2Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("NextYearEvaluateePlanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long?>("NextYearFocusedFrameworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NextYearFocusedSGframeworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PerformanceLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("PromptsTeeSentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PromptsTorSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SGScoreOverrideComment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValue("");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<bool?>("SelfEvalComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SelfEvalCompleteDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SelfEvalSentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("SelfEvalShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SendFinalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentGrowthImpactRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("SuggestedEvaluateePlanType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SuggestedFocusedFrameworkNodeShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("SuggestedFocusedSgframeworkNodeShortName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<bool?>("VisibleToEvaluatee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("WfState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("EvaluateeId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("FocusedFrameworkNodeId");

                    b.HasIndex("FocusedSGFrameworkNodeId");

                    b.HasIndex("ModifiedCompFocusedFrameworkNode2Id");

                    b.HasIndex("NextYearFocusedFrameworkNodeId");

                    b.HasIndex("NextYearFocusedSGframeworkNodeId");

                    b.ToTable("Evaluation", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.Framework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("FrameworkTagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Framework", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkContext", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DefaultFrameworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EvaluationType")
                        .HasColumnType("int");

                    b.Property<string>("FrameworkTagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FrameworkViewType")
                        .HasColumnType("int");

                    b.Property<long?>("InstructionalFrameworkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LoadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("PrototypeFrameworkContextId")
                        .HasColumnType("bigint");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<long>("StateFrameworkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DefaultFrameworkId");

                    b.HasIndex("InstructionalFrameworkId");

                    b.HasIndex("PrototypeFrameworkContextId");

                    b.HasIndex("StateFrameworkId");

                    b.ToTable("FrameworkContext", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkContextPrototype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("EvaluationType")
                        .HasColumnType("int");

                    b.Property<string>("FrameworkTagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("InstructionalFrameworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<long?>("StateFrameworkId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstructionalFrameworkId");

                    b.HasIndex("StateFrameworkId");

                    b.ToTable("FrameworkContextPrototype", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("FrameworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("FrameworkTagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsStudentGrowthAligned")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("FrameworkId");

                    b.ToTable("FrameworkNode", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkNodeRubricRow", b =>
                {
                    b.Property<long>("FrameworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RubricRowId")
                        .HasColumnType("bigint");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("FrameworkNodeId", "RubricRowId");

                    b.HasIndex("RubricRowId");

                    b.ToTable("FrameworkNodeRubricRow", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EDSName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.RubricRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("FrameworkTagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsStudentGrowthAligned")
                        .HasColumnType("bit");

                    b.Property<string>("LookFor1")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LookFor2")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LookFor3")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LookFor4")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PL1Descriptor")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PL2Descriptor")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PL3Descriptor")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("PL4Descriptor")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.ToTable("RubricRow", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.SchoolConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("FrameworkContextId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsPrincipalAssignmentDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SchoolCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FrameworkContextId");

                    b.ToTable("SchoolConfiguration", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.StudentGrowthGoal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BundleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EvaluateeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EvaluationId")
                        .HasColumnType("bigint");

                    b.Property<long>("FrameworkNodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("GoalStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ProcessRubricRowId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResultsRubricRowId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentGrowthGoalBundleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("EvaluateeId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("FrameworkNodeId");

                    b.HasIndex("ProcessRubricRowId");

                    b.HasIndex("ResultsRubricRowId");

                    b.HasIndex("StudentGrowthGoalBundleId");

                    b.ToTable("StudentGrowthGoal", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.StudentGrowthGoalBundle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("EvaluateeEoyconfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<long>("EvaluateeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EvaluateeMidConfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("EvaluateeProcessConfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<long>("EvaluationId")
                        .HasColumnType("bigint");

                    b.Property<int>("EvaluationType")
                        .HasColumnType("int");

                    b.Property<string>("EvaluatorEoyconfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("EvaluatorMidConfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("EvaluatorProcessConfNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("EvaluatorScoresShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("GoalSettingConfDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InRevision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ProcessCompleteDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessSharedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("SharingDraft")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("WfState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluateeId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("StudentGrowthGoalBundle", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.UserBuildingRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBuildingRole", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.WorkArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EvaluateeRoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("EvaluationType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDistrictAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvaluatee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvaluator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchoolAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluateeRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("WorkArea", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.WorkAreaContext", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<long>("FrameworkContextId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkAreaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FrameworkContextId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("WorkAreaContext", "dbo");
                });

            modelBuilder.Entity("SE.Domain.Entities.DistrictConfiguration", b =>
                {
                    b.HasOne("SE.Domain.Entities.FrameworkContext", "FrameworkContext")
                        .WithOne("DistrictConfiguration")
                        .HasForeignKey("SE.Domain.Entities.DistrictConfiguration", "FrameworkContextId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FrameworkContext");
                });

            modelBuilder.Entity("SE.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("SE.Domain.Entities.User", "Evaluatee")
                        .WithMany()
                        .HasForeignKey("EvaluateeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.User", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "FocusedFrameworkNode")
                        .WithMany()
                        .HasForeignKey("FocusedFrameworkNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "FocusedSGFrameworkNode")
                        .WithMany()
                        .HasForeignKey("FocusedSGFrameworkNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "ModifiedCompFocusedFrameworkNode2")
                        .WithMany()
                        .HasForeignKey("ModifiedCompFocusedFrameworkNode2Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "NextYearFocusedFrameworkNode")
                        .WithMany()
                        .HasForeignKey("NextYearFocusedFrameworkNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "NextYearFocusedSGframeworkNode")
                        .WithMany()
                        .HasForeignKey("NextYearFocusedSGframeworkNodeId");

                    b.Navigation("Evaluatee");

                    b.Navigation("Evaluator");

                    b.Navigation("FocusedFrameworkNode");

                    b.Navigation("FocusedSGFrameworkNode");

                    b.Navigation("ModifiedCompFocusedFrameworkNode2");

                    b.Navigation("NextYearFocusedFrameworkNode");

                    b.Navigation("NextYearFocusedSGframeworkNode");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkContext", b =>
                {
                    b.HasOne("SE.Domain.Entities.Framework", "DefaultFramework")
                        .WithMany()
                        .HasForeignKey("DefaultFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Framework", "InstructionalFramework")
                        .WithMany()
                        .HasForeignKey("InstructionalFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.FrameworkContextPrototype", "PrototypeFrameworkContext")
                        .WithMany()
                        .HasForeignKey("PrototypeFrameworkContextId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Framework", "StateFramework")
                        .WithMany()
                        .HasForeignKey("StateFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultFramework");

                    b.Navigation("InstructionalFramework");

                    b.Navigation("PrototypeFrameworkContext");

                    b.Navigation("StateFramework");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkContextPrototype", b =>
                {
                    b.HasOne("SE.Domain.Entities.Framework", "InstructionalFramework")
                        .WithMany()
                        .HasForeignKey("InstructionalFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.Framework", "StateFramework")
                        .WithMany()
                        .HasForeignKey("StateFrameworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstructionalFramework");

                    b.Navigation("StateFramework");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkNode", b =>
                {
                    b.HasOne("SE.Domain.Entities.Framework", "Framework")
                        .WithMany("FrameworkNodes")
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkNodeRubricRow", b =>
                {
                    b.HasOne("SE.Domain.Entities.FrameworkNode", "FrameworkNode")
                        .WithMany("FrameworkNodeRubricRows")
                        .HasForeignKey("FrameworkNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.RubricRow", "RubricRow")
                        .WithMany("FrameworkNodeRubricRows")
                        .HasForeignKey("RubricRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameworkNode");

                    b.Navigation("RubricRow");
                });

            modelBuilder.Entity("SE.Domain.Entities.SchoolConfiguration", b =>
                {
                    b.HasOne("SE.Domain.Entities.FrameworkContext", "FrameworkContext")
                        .WithMany("SchoolConfigurations")
                        .HasForeignKey("FrameworkContextId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FrameworkContext");
                });

            modelBuilder.Entity("SE.Domain.Entities.StudentGrowthGoal", b =>
                {
                    b.HasOne("SE.Domain.Entities.StudentGrowthGoalBundle", "GoalBundle")
                        .WithMany()
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.User", "Evaluatee")
                        .WithMany()
                        .HasForeignKey("EvaluateeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.FrameworkNode", "FrameworkNode")
                        .WithMany()
                        .HasForeignKey("FrameworkNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.RubricRow", "ProcessRubricRow")
                        .WithMany()
                        .HasForeignKey("ProcessRubricRowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.RubricRow", "ResultsRubricRow")
                        .WithMany()
                        .HasForeignKey("ResultsRubricRowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SE.Domain.Entities.StudentGrowthGoalBundle", null)
                        .WithMany("Goals")
                        .HasForeignKey("StudentGrowthGoalBundleId");

                    b.Navigation("Evaluatee");

                    b.Navigation("Evaluation");

                    b.Navigation("FrameworkNode");

                    b.Navigation("GoalBundle");

                    b.Navigation("ProcessRubricRow");

                    b.Navigation("ResultsRubricRow");
                });

            modelBuilder.Entity("SE.Domain.Entities.StudentGrowthGoalBundle", b =>
                {
                    b.HasOne("SE.Domain.Entities.User", "Evaluatee")
                        .WithMany()
                        .HasForeignKey("EvaluateeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluatee");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("SE.Domain.Entities.UserBuildingRole", b =>
                {
                    b.HasOne("SE.Domain.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.User", "User")
                        .WithMany("UserBuildingRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserBuildingRole_User_UserId");

                    b.Navigation("Building");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Domain.Entities.WorkArea", b =>
                {
                    b.HasOne("SE.Domain.Entities.Role", "EvaluateeRole")
                        .WithMany()
                        .HasForeignKey("EvaluateeRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EvaluateeRole");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Domain.Entities.WorkAreaContext", b =>
                {
                    b.HasOne("SE.Domain.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.FrameworkContext", "FrameworkContext")
                        .WithMany()
                        .HasForeignKey("FrameworkContextId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SE.Domain.Entities.User", "User")
                        .WithMany("WorkAreaContexts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_WorkAreaContext_User_UserId");

                    b.HasOne("SE.Domain.Entities.WorkArea", "WorkArea")
                        .WithMany()
                        .HasForeignKey("WorkAreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("FrameworkContext");

                    b.Navigation("User");

                    b.Navigation("WorkArea");
                });

            modelBuilder.Entity("SE.Domain.Entities.Framework", b =>
                {
                    b.Navigation("FrameworkNodes");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkContext", b =>
                {
                    b.Navigation("DistrictConfiguration");

                    b.Navigation("SchoolConfigurations");
                });

            modelBuilder.Entity("SE.Domain.Entities.FrameworkNode", b =>
                {
                    b.Navigation("FrameworkNodeRubricRows");
                });

            modelBuilder.Entity("SE.Domain.Entities.RubricRow", b =>
                {
                    b.Navigation("FrameworkNodeRubricRows");
                });

            modelBuilder.Entity("SE.Domain.Entities.StudentGrowthGoalBundle", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("SE.Domain.Entities.User", b =>
                {
                    b.Navigation("UserBuildingRoles");

                    b.Navigation("WorkAreaContexts");
                });
#pragma warning restore 612, 618
        }
    }
}
